{"ast":null,"code":"var _jsxFileName = \"/Users/Morgan/Programmation/ReactJS/FleurilandDashboard/client/src/components/Orders/OrderTable.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport OrderItem from './OrderItem';\nimport { TableSortLabel } from '@material-ui/core';\n\nconst OrderHead = ({\n  orderBy,\n  orderDir\n}) => {\n  const heads = [\"N°\", \"Nom\", \"Total\", \"Status\", \"Date de commande\", \"Expédition\"];\n\n  const createSortHandler = id => null;\n\n  return __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, heads.map((name, id) => __jsx(TableCell, {\n    key: id,\n    align: name == \"Expédition\" ? \"center\" : \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, __jsx(TableSortLabel, {\n    active: orderBy === id,\n    direction: orderBy === id ? orderDir : 'asc',\n    onClick: createSortHandler(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, name)))));\n};\n\nconst sortById = (elmt1, elmt2) => elmt1.id <= elmt2.id ? -1 : 1;\n\nconst OrderTable = props => {\n  const {\n    orders\n  } = props;\n  const {\n    0: orderBy,\n    1: setOrderBy\n  } = useState();\n  const {\n    0: orderDir,\n    1: setOrderDir\n  } = useState('asc');\n  const sorters = [sortById];\n\n  const getSortHandler = (orderBy, orderDir) => {\n    return (elmt1, elmt2) => {\n      const ret = sorters[orderBy](elmt1, elmt2); //elmt1.id <= elmt2.id ? -1 : 1;\n\n      return orderDir == 'asc' ? ret : -ret;\n    };\n  };\n\n  return __jsx(\"div\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), __jsx(Table, {\n    stickyHeader: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(OrderHead, {\n    orderBy: orderBy,\n    orderDir: orderDir,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, orders.sort(getSortHandler(0, orderDir)).map(order => {\n    return __jsx(OrderItem, {\n      key: order.id,\n      order: order,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    });\n  }))));\n};\n\nexport default OrderTable;","map":{"version":3,"sources":["/Users/Morgan/Programmation/ReactJS/FleurilandDashboard/client/src/components/Orders/OrderTable.tsx"],"names":["React","useState","Table","TableBody","TableCell","TableHead","TableRow","OrderItem","TableSortLabel","OrderHead","orderBy","orderDir","heads","createSortHandler","id","map","name","sortById","elmt1","elmt2","OrderTable","props","orders","setOrderBy","setOrderDir","sorters","getSortHandler","ret","sort","order"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport OrderItem from './OrderItem';\nimport { TableSortLabel } from '@material-ui/core';\n\ninterface TableProps {\n    orders:any\n}\n\ninterface HeadProps {\n    orderBy: number\n    orderDir: \"desc\" | \"asc\"\n}\n\nconst OrderHead: React.FC<HeadProps> = ({orderBy, orderDir}) => {\n    const heads:string[]= [\"N°\", \"Nom\", \"Total\", \"Status\", \"Date de commande\", \"Expédition\"];\n    const createSortHandler = (id) => null;\n    return (\n        <TableHead>\n            <TableRow>\n                {heads.map((name:string, id: number) => (\n                <TableCell \n                    key={id}\n                    align = {name==\"Expédition\" ? \"center\" : \"left\"}\n                >\n                    <TableSortLabel\n                        active={orderBy === id}\n                        direction={orderBy === id ? orderDir : 'asc'}\n                        onClick={createSortHandler(id)}\n                    >\n                    {name}\n                    </TableSortLabel>\n                </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst sortById = (elmt1, elmt2) => elmt1.id <= elmt2.id ? -1 : 1;\n\nconst OrderTable: React.FC<TableProps> = (props) => {\n    const { orders } = props;\n    const [orderBy, setOrderBy] = useState();\n    const [orderDir, setOrderDir] = useState<\"desc\" | \"asc\">('asc');\n    const sorters = [sortById]\n    const getSortHandler = (orderBy, orderDir) => { return (\n        (elmt1: any, elmt2: any) =>  {\n\n            const ret = sorters[orderBy](elmt1,elmt2); //elmt1.id <= elmt2.id ? -1 : 1;\n            return (orderDir == 'asc' ? ret : -ret);\n        }\n    )}\n    return (\n        <div {...props}>\n        <Table stickyHeader size=\"small\">\n            <OrderHead orderBy={orderBy} orderDir={orderDir}/>\n            <TableBody>\n                {orders.sort(getSortHandler(0, orderDir)).map((order) => {\n                    return (\n                    <OrderItem \n                        key = {order.id}\n                        order={order}\n                    />)}\n                )}\n            </TableBody>\n        </Table>\n        </div>\n)}\n   \nexport default OrderTable;"]},"metadata":{},"sourceType":"module"}