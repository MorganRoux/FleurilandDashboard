{"ast":null,"code":"var _jsxFileName = \"/Users/Morgan/Programmation/ReactJS/FleurilandDashboard/client/src/components/Orders/OrderTable.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport OrderItem from './OrderItem';\nimport { sortById } from './sorters';\nimport { TableSortLabel } from '@material-ui/core';\n\nconst OrderHead = ({\n  orderBy,\n  orderDir,\n  setOrderBy,\n  setOrderDir\n}) => {\n  const heads = [\"N°\", \"Nom\", \"Total\", \"Status\", \"Date de commande\", \"Expédition\"];\n\n  const createSortHandler = id => {\n    if (orderBy == id) setOrderDir(orderDir == 'asc' ? 'desc' : 'asc');else {\n      setOrderBy(id);\n      setOrderDir('asc');\n    }\n  };\n\n  return __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, heads.map((name, id) => __jsx(TableCell, {\n    key: id,\n    align: name == \"Expédition\" ? \"center\" : \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, __jsx(TableSortLabel, {\n    active: orderBy === id,\n    direction: orderBy === id ? orderDir : 'asc',\n    onClick: id => createSortHandler(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, name)))));\n};\n\nconst OrderTable = props => {\n  const {\n    orders\n  } = props;\n  const {\n    0: orderBy,\n    1: setOrderBy\n  } = useState();\n  const {\n    0: orderDir,\n    1: setOrderDir\n  } = useState('asc');\n  const sorters = [sortById];\n\n  const getSortHandler = (orderBy, orderDir) => {\n    return (elmt1, elmt2) => {\n      const ret = sorters[orderBy](elmt1, elmt2); //elmt1.id <= elmt2.id ? -1 : 1;\n\n      return orderDir == 'asc' ? ret : -ret;\n    };\n  };\n\n  return __jsx(\"div\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), __jsx(Table, {\n    stickyHeader: true,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(OrderHead, {\n    orderBy: orderBy,\n    orderDir: orderDir,\n    setOrderBy: setOrderBy,\n    setOrderDir: setOrderDir,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, orders.sort(getSortHandler(orderBy, orderDir)).map(order => {\n    return __jsx(OrderItem, {\n      key: order.id,\n      order: order,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    });\n  }))));\n};\n\nexport default OrderTable;","map":{"version":3,"sources":["/Users/Morgan/Programmation/ReactJS/FleurilandDashboard/client/src/components/Orders/OrderTable.tsx"],"names":["React","useState","Table","TableBody","TableCell","TableHead","TableRow","OrderItem","sortById","TableSortLabel","OrderHead","orderBy","orderDir","setOrderBy","setOrderDir","heads","createSortHandler","id","map","name","OrderTable","props","orders","sorters","getSortHandler","elmt1","elmt2","ret","sort","order"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport OrderItem from './OrderItem';\nimport { sortById, sortByName } from './sorters';\nimport { TableSortLabel } from '@material-ui/core';\n\ninterface TableProps {\n    orders:any\n}\n\ninterface HeadProps {\n    orderBy: number\n    orderDir: \"desc\" | \"asc\"\n    setOrderBy\n    setOrderDir\n}\n\nconst OrderHead: React.FC<HeadProps> = ({orderBy, orderDir, setOrderBy, setOrderDir}) => {\n    const heads:string[]= [\"N°\", \"Nom\", \"Total\", \"Status\", \"Date de commande\", \"Expédition\"];\n    const createSortHandler = (id) => {\n        if (orderBy == id)\n            setOrderDir(orderDir == 'asc' ? 'desc' : 'asc');\n        else {\n            setOrderBy(id);\n            setOrderDir('asc');\n        }\n    };\n    return (\n        <TableHead>\n            <TableRow>\n                {heads.map((name:string, id: number) => (\n                <TableCell \n                    key={id}\n                    align = {name==\"Expédition\" ? \"center\" : \"left\"}\n                >\n                    <TableSortLabel\n                        active={orderBy === id}\n                        direction={orderBy === id ? orderDir : 'asc'}\n                        onClick={(id) => createSortHandler(id)}\n                    >\n                    {name}\n                    </TableSortLabel>\n                </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst OrderTable: React.FC<TableProps> = (props) => {\n    const { orders } = props;\n    const [orderBy, setOrderBy] = useState();\n    const [orderDir, setOrderDir] = useState<\"desc\" | \"asc\">('asc');\n    const sorters = [sortById]\n    const getSortHandler = (orderBy, orderDir) => { return (\n        (elmt1: any, elmt2: any) =>  {\n\n            const ret = sorters[orderBy](elmt1,elmt2); //elmt1.id <= elmt2.id ? -1 : 1;\n            return (orderDir == 'asc' ? ret : -ret);\n        }\n    )}\n    return (\n        <div {...props}>\n        <Table stickyHeader size=\"small\">\n            <OrderHead orderBy={orderBy} orderDir={orderDir} setOrderBy={setOrderBy} setOrderDir={setOrderDir}/>\n            <TableBody>\n                {orders.sort(getSortHandler(orderBy, orderDir)).map((order) => {\n                    return (\n                    <OrderItem \n                        key = {order.id}\n                        order={order}\n                    />)}\n                )}\n            </TableBody>\n        </Table>\n        </div>\n)}\n   \nexport default OrderTable;"]},"metadata":{},"sourceType":"module"}