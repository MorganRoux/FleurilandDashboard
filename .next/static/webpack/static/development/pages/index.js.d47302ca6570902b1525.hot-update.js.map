{"version":3,"file":"static/webpack/static/development/pages/index.js.d47302ca6570902b1525.hot-update.js","sources":["webpack:///./src/components/Orders/OrderItem.tsx"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport StatusSelector from './StatusSelector';\nimport axios from 'axios';\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\nimport HouseOutlinedIcon from '@material-ui/icons/HouseOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fade from '@material-ui/core/Fade';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\n\ninterface OrderItemProps extends WithSnackbarProps {\n    order: any,\n}\n\nconst OrderItem: React.FC<OrderItemProps> = (props) => {\n    const { order } = props;\n    return (\n            order && (\n            <TableRow key={order.id}>\n            <IdCell {...props }/>\n            <NameCell {...props }/>\n            <PriceCell {...props }/>\n            <StatusCell {...props }/>\n            <DateCell {...props} />\n            <MethodCell {...props }/>\n            </TableRow>\n            )\n    );\n}\n\nconst IdCell: React.FC<OrderItemProps> = ({ order }) => {\n    return (\n        <TableCell>{order.id}</TableCell>\n    );\n}\n\nconst NameCell: React.FC<OrderItemProps> = ({ order }) => {\n    const firstName = order.billing.first_name.charAt(0).toUpperCase() + order.billing.first_name.slice(1).toLowerCase();\n    const lastName = order.billing.last_name.charAt(0).toUpperCase() + order.billing.last_name.slice(1).toLowerCase();\n    return (\n        <TableCell>{firstName} {lastName}</TableCell>\n    );\n}\n\nconst PriceCell: React.FC<OrderItemProps> = ({ order }) => {\n    return (\n        <TableCell>{order.total}€</TableCell>\n    );\n}\n\nconst StatusCell: React.FC<OrderItemProps> = ({order, enqueueSnackbar}) => {\n    const [status, setStatus] = useState(order.status);\n\n    const handleChange = async (event: React.ChangeEvent<{ value: unknown }>) => {\n        const status = event.target.value;\n        const rep = await axios.put(`http://localhost:3000/api/updateOrder?id=${order.id}&status=${status}`);\n        console.log(\"ok\")\n        if (rep.data.status == event.target.value) {\n            setStatus(event.target.value as string);\n            enqueueSnackbar('Mise à jour réussie', { \n                variant: 'success',\n                anchorOrigin: { vertical: 'bottom', horizontal: 'right'}\n            });\n        }\n        else\n            enqueueSnackbar('Erreur de connexion au serveur', { \n                variant: 'error',\n                anchorOrigin: { vertical: 'bottom', horizontal: 'right'}\n            });\n      };\n \n    return (\n        <TableCell style={{ borderRadius:10 }}>\n            <StatusSelector status={status} handleChange={handleChange}/>\n        </TableCell>\n    );\n}\n\nconst DateCell: React.FC<OrderItemProps> = ({ order }) => {\n    const date:Date = new Date(order.date_created);\n    const min = date.getMinutes().toString().padStart(2, \"0\");\n    const hh = date.getHours().toString().padStart(2, \"0\");\n    const dd = date.getDate().toString().padStart(2, \"0\");\n    const mm = (date.getMonth()+1).toString().padStart(2, \"0\");\n    const yyyy = date.getFullYear().toString().padStart(2, \"0\");\n    return (\n        <TableCell>{`${dd}-${mm}-${yyyy} ${hh}:${min}`}</TableCell>\n    );\n}\n\nconst MethodCell: React.FC<OrderItemProps> = ({ order }) => {\n    const method = order.shipping_lines[0] ? order.shipping_lines[0].method_title : 'Aucune méthode renseignée';\n    return (\n        <TableCell align=\"center\">\n            { (!!method) &&\n                <Tooltip \n                    title={method}\n                    TransitionComponent={Fade} \n                    TransitionProps={{ timeout: 600 }}\n                >\n                {method == \"Retrait en point de vente\" ? (\n                        <HouseOutlinedIcon fontSize='large'/>\n                ) : (\n                    <LocalShippingIcon fontSize='large'/>\n                )}\n                </Tooltip>\n            }\n        </TableCell>\n    );\n}\n\nexport default withSnackbar(OrderItem);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAGA;AACA;AAAA;AAAA;AAAA;AAFA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}