{"version":3,"file":"static/webpack/static/development/pages/index.js.395ce3fef64d840db03c.hot-update.js","sources":["webpack:///./src/components/Orders/OrderTable.tsx","webpack:///./src/components/Orders/sorters.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport OrderItem from './OrderItem';\nimport { sortById, sortByName } from './sorters';\nimport { TableSortLabel } from '@material-ui/core';\n\ninterface TableProps {\n    orders:any\n}\n\ninterface HeadProps {\n    orderBy: number\n    orderDir: \"desc\" | \"asc\"\n    setOrderBy\n    setOrderDir\n}\n\nconst OrderHead: React.FC<HeadProps> = ({orderBy, orderDir, setOrderBy, setOrderDir}) => {\n    const heads:string[]= [\"N°\", \"Nom\", \"Total\", \"Status\", \"Date de commande\", \"Expédition\"];\n    const createSortHandler = (id) => {\n        if (orderBy == id)\n            setOrderDir(orderDir == 'asc' ? 'desc' : 'asc');\n        else {\n            setOrderBy(id);\n            setOrderDir('asc');\n        }\n    };\n    return (\n        <TableHead>\n            <TableRow>\n                {heads.map((name:string, id: number) => (\n                <TableCell \n                    key={id}\n                    align = {name==\"Expédition\" ? \"center\" : \"left\"}\n                >\n                    <TableSortLabel\n                        active={orderBy === id}\n                        direction={orderBy === id ? orderDir : 'asc'}\n                        onClick={(id) => createSortHandler(id)}\n                    >\n                    {name}\n                    </TableSortLabel>\n                </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst OrderTable: React.FC<TableProps> = (props) => {\n    const { orders } = props;\n    const [orderBy, setOrderBy] = useState();\n    const [orderDir, setOrderDir] = useState<\"desc\" | \"asc\">('asc');\n    const sorters = [sortById]\n    const getSortHandler = (orderBy, orderDir) => { return (\n        (elmt1: any, elmt2: any) =>  {\n\n            const ret = sorters[orderBy](elmt1,elmt2); //elmt1.id <= elmt2.id ? -1 : 1;\n            return (orderDir == 'asc' ? ret : -ret);\n        }\n    )}\n    return (\n        <div {...props}>\n        <Table stickyHeader size=\"small\">\n            <OrderHead orderBy={orderBy} orderDir={orderDir} setOrderBy={setOrderBy} setOrderDir={setOrderDir}/>\n            <TableBody>\n                {orders.sort(getSortHandler(orderBy, orderDir)).map((order) => {\n                    return (\n                    <OrderItem \n                        key = {order.id}\n                        order={order}\n                    />)}\n                )}\n            </TableBody>\n        </Table>\n        </div>\n)}\n   \nexport default OrderTable;","export const sortById = (elmt1, elmt2) => elmt1.id <= elmt2.id ? -1 : 1;\n\nexport const sortByName = (elmt1, elmt2) => {\n    const firstName1 = elmt1.billing.first_name.charAt(0).toUpperCase() + elmt1.billing.first_name.slice(1).toLowerCase();\n    const lastName1 = elmt1.billing.last_name.charAt(0).toUpperCase() + elmt1.billing.last_name.slice(1).toLowerCase();\n    const firstName2 = elmt2.billing.first_name.charAt(0).toUpperCase() + elmt2.billing.first_name.slice(1).toLowerCase();\n    const lastName2 = elmt2.billing.last_name.charAt(0).toUpperCase() + elmt2.billing.last_name.slice(1).toLowerCase();\n    \n    if (firstName1 != firstName2) {\n        return (firstName1 <= firstName2 ? -1 : 1);\n    }\n    else \n        return (lastName1 <= lastName2 ? -1 : 1);\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAiBA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AACA;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;A","sourceRoot":""}